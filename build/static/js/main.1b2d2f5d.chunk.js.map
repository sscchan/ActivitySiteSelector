{"version":3,"sources":["Components/SiteManagement.jsx","Components/WeatherFilterParameters.jsx","Components/SiteWeatherOutputs.jsx","App.js","reportWebVitals.js","index.js"],"names":["SiteManagement","props","state","siteNameInputValue","siteLatitudeInputValue","siteLongitudeInputValue","name","this","latitude","Number","longitude","console","log","isNaN","axios","put","encodeURIComponent","then","res","setState","bind","alert","delete","Container","Row","Form","Col","Control","placeholder","value","onChange","event","target","Button","onClick","handleAddOnClick","handleRemoveOnClick","React","Component","WeatherFilterParameters","maxTemperatureInputValue","Group","Label","onLoadResults","SiteWeatherOutputEntry","maxTemperature","SiteWeatherOutputs","Table","siteResults","map","site","index","App","maxTemperatureInput","get","params","data","className","handleLoadResults","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1b2d2f5d.chunk.js","sourcesContent":["import React from 'react';\nimport Button from 'react-bootstrap/Button';\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Form from 'react-bootstrap/Form';\nimport axios from 'axios';\n\nclass SiteManagement extends React.Component {\n    constructor(props) {\n      super(props);\n      this.state = {\n        siteNameInputValue: \"\",\n        siteLatitudeInputValue: \"\",\n        siteLongitudeInputValue: \"\"\n      }\n    }\n  \n    handleAddOnClick() {\n      const name = this.state.siteNameInputValue;\n      const latitude = Number(this.state.siteLatitudeInputValue);\n      const longitude = Number(this.state.siteLongitudeInputValue);\n\n      console.log(`Adding Site: ${name} at (${latitude},${longitude})`);\n      \n      // Validate Inputs\n      if (!name || name === \"\") {\n        alert(\"Name must not be empty\");\n        return;\n      }\n\n      if (!latitude || latitude === \"\" || isNaN(latitude) || !((latitude <= 90) && (latitude >= -90))) {\n        alert(\"Latitude must be a numerical value between 90 and -90\");\n        return;\n      }\n\n      if (!longitude || longitude === \"\" || isNaN(longitude) || !((longitude <= 180) && (longitude >= -180))) {\n        alert(\"Longitude must be a numerical value between 180 and -180\");\n        return;\n      }\n\n      axios.put(`/sites/${encodeURIComponent(name)}`, {\n        \"latitude\": latitude,\n        \"longitude\": longitude\n      }).then(function (res) {\n        console.log(res);\n        this.setState({\n          siteNameInputValue: \"\",\n          siteLatitudeInputValue: \"\",\n          siteLongitudeInputValue: \"\"\n        })\n      }.bind(this))\n    }\n  \n    handleRemoveOnClick() {\n      const name = this.state.siteNameInputValue\n      console.log(`Removing Site: ${name}`);\n\n      // Validate Inputs\n      if (name === \"\") {\n        alert(\"Name must not be empty\");\n        return;\n      }\n\n      axios.delete(`sites/${encodeURIComponent(name)}`).then(function(res) {\n        console.log(res);\n        this.setState({\n          siteNameInputValue: \"\",\n          siteLatitudeInputValue: \"\",\n          siteLongitudeInputValue: \"\"\n        })\n      }.bind(this))\n\n    }\n  \n    render() {\n      return (\n        <Container>\n          <Row>\n            <h3>Add / Remove Site</h3>\n          </Row>\n  \n          <Form>\n            <Row>\n              <Col>\n                <Form.Control\n                  placeholder=\"Name\"\n                  value={this.state.siteNameInputValue} \n                  onChange={event => this.setState({ siteNameInputValue: event.target.value })} />\n              </Col>\n              <Col>\n                <Form.Control\n                  placeholder=\"Latitude\"\n                  value={this.state.siteLatitudeInputValue}\n                  onChange={event => this.setState({ siteLatitudeInputValue: event.target.value })} />\n              </Col>\n              <Col>\n                <Form.Control \n                  placeholder=\"Longitude\"\n                  value={this.state.siteLongitudeInputValue}\n                  onChange={event => this.setState({ siteLongitudeInputValue: event.target.value })} />\n              </Col>\n              <Col>\n                <Button onClick={this.handleAddOnClick.bind(this)}>Add</Button>&nbsp;\n              <Button onClick={this.handleRemoveOnClick.bind(this)}>Remove</Button>\n              </Col>\n            </Row>\n          </Form>\n        </Container>\n      )\n    }\n  }\n\n  export default SiteManagement;","import React from 'react';\nimport Button from 'react-bootstrap/Button';\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Form from 'react-bootstrap/Form';\n\nclass WeatherFilterParameters extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      maxTemperatureInputValue: \"\"\n    }\n  }\n\n  render() {\n    return (\n      <Container>\n        <Row>\n          <h3>Weather Filter Parameters</h3>\n        </Row>\n        <Row>\n          <Col>\n            <Form.Group>\n              <Form.Label>Max Temperature</Form.Label>\n              <Form.Control\n                placeholder=\"None\"\n                value={this.state.maxTemperatureInputValue} \n                onChange={event => this.setState({maxTemperatureInputValue: event.target.value})}/>\n            </Form.Group>\n          </Col>\n        </Row>\n        <Row>\n          <Col>\n            <Button onClick={() => {this.props.onLoadResults(this.state.maxTemperatureInputValue)}}>Load Results</Button>\n          </Col>\n        </Row>\n      </Container>\n    )\n  }\n}\n\nexport default WeatherFilterParameters;","import Container from 'react-bootstrap/Container';\nimport Table from 'react-bootstrap/Table';\nimport Row from 'react-bootstrap/Row';\n\nfunction SiteWeatherOutputs(props) {\n  return (\n    <Container>\n      <Row>\n        <h2>Results</h2>\n      </Row>\n\n      <Row>\n        <Table>\n          <thead>\n            <tr>\n              <th>Name</th>\n              <th>Latitude</th>\n              <th>Longitude</th>\n              <th>Max Temperature</th>\n            </tr>\n          </thead>\n          <tbody>\n            {\n              props.siteResults.map(function(site, index) {\n                return (<SiteWeatherOutputEntry key={index} name={site.name} latitude={site.latitude} longitude={site.longitude} maxTemperature={site.maxTemperature} />);\n              })\n            }\n          </tbody>\n        </Table>\n      </Row>\n    </Container>\n  )\n}\n\nfunction SiteWeatherOutputEntry(props) {\n  return (\n    <tr>\n      <td>{props.name}</td>\n      <td>{props.latitude}</td>\n      <td>{props.longitude}</td>\n      <td>{props.maxTemperature}</td>\n    </tr>\n  );\n}\n\nexport default SiteWeatherOutputs;","import React from 'react';\nimport Container from 'react-bootstrap/Container';\nimport axios from 'axios';\n\nimport SiteManagement from './Components/SiteManagement.jsx';\nimport WeatherFilterParameters from './Components/WeatherFilterParameters.jsx';\nimport SiteWeatherOutputs from './Components/SiteWeatherOutputs.jsx';\n\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      \"siteResults\" : []\n    };\n  }\n\n  handleLoadResults(maxTemperatureInput) {\n    const maxTemperature = Number(maxTemperatureInput);\n\n    //Validate input parameters\n    if (isNaN(maxTemperature)) {\n      alert(\"Maximum Temperature must be a empty value or a numerical value\");\n      return\n    }\n\n    axios.get(\"/sites\", {\n      params: {\n        \"maxTemperature\": maxTemperatureInput\n      }\n    }).then(function(res) {\n      console.log(res.data);\n      this.setState({\n        \"siteResults\" : res.data\n      });\n    }.bind(this));\n  }\n\n  render() {\n    return (\n      <Container className=\"App\">\n        <h2>Site Weather</h2>\n        <SiteManagement />\n        <br />\n        <WeatherFilterParameters onLoadResults={this.handleLoadResults.bind(this)} />\n        <br />\n        <SiteWeatherOutputs siteResults={this.state.siteResults}/>\n\n      </Container>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}